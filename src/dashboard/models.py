import datetime

from django.db import models
from django_pandas.managers import DataFrameManager
# Create your models here.

"""Serial No. SN0005000043200005"""
class SN05(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Temperature = models.IntegerField(default=24) # Tempurature
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    Eac_Total = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till date
    
    objects = DataFrameManager()
    def __str__(self):
            return str(self.Time)


class SN05_D(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
            return str(self.Time)


class SN05_M(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
            return str(self.Time)


class SN05_Y(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
            return str(self.Time)


"""Serial No. SN000500004320007B"""    
class SN7B(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Temperature = models.IntegerField(default=24) # Tempurature
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    Eac_Total = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till date
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)


class SN7B_D(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter

    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)


class SN7B_M(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)


class SN7B_Y(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)


"""Serial No. SN0005000043200013"""
class SN13(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Temperature = models.IntegerField(default=24) # Tempurature
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    Eac_Total = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till date
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)


class SN13_D(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)


class SN13_M(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)


class SN13_Y(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)
		


"""Serial No. SN0005000043200015"""
class SN15(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Temperature = models.IntegerField(default=24) # Tempurature
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    Eac_Total = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till date
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)


class SN15_D(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)


class SN15_M(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)


class SN15_Y(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)


"""Serial No. SN0005000043200028"""
class SN28(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Temperature = models.IntegerField(default=24) # Tempurature
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    Eac_Total = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till date
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)
    

class SN28_D(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)


class SN28_M(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)


class SN28_Y(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)


"""Serial No. SN0005000043200033"""    
class SN33(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Temperature = models.IntegerField(default=24) # Tempurature
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    Eac_Total = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till date
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)


class SN33_D(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)


class SN33_M(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)


class SN33_Y(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)


"""Serial No. SN0005000043200034"""    
class SN34(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Temperature = models.IntegerField(default=24) # Tempurature
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    Eac_Total = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till date
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)


class SN34_D(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)

class SN34_M(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)


class SN34_Y(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)


"""Serial No. SN0005000043200044"""    
class SN44(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Temperature = models.IntegerField(default=24) # Tempurature
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    Eac_Total = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till date
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)

class SN44_D(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)

class SN44_M(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)

class SN44_Y(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)  

"""Serial No. SN0005000043200048"""
class SN48(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Temperature = models.IntegerField(default=24) # Tempurature
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    Eac_Total = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till date
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)

class SN48_D(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)

class SN48_M(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)

class SN48_Y(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)
    
"""Serial No. SN0005000043200066"""   
class SN66(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Temperature = models.IntegerField(default=24) # Tempurature
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    Eac_Total = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till date
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)

class SN66_D(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)

class SN66_M(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)

class SN66_Y(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)
    
"""Serial No. SN0005000043200083"""
class SN83(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Temperature = models.IntegerField(default=24) # Tempurature
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    Eac_Total = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till date
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)

class SN83_D(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)

class SN83_M(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)

class SN83_Y(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)
    
"""Serial No. SN0005000043200089"""    
class SN89(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Temperature = models.IntegerField(default=24) # Tempurature
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    Eac_Total = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till date
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)
    
class SN89_D(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)

class SN89_M(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)

class SN89_Y(models.Model):
    Time = models.DateTimeField('Time data was recorded') # Time the Data was acquired
    Eac_Today = models.DecimalField(max_digits=20, decimal_places=4) # Energy generation till the time of Day
    Vpv = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of photovoltaic
    Ipv = models.DecimalField(max_digits=20, decimal_places=4) # Current of photovoltaic
    Ppv = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by photovoltaic
    Vac = models.DecimalField(max_digits=20, decimal_places=4) # Potential Difference of Inverter
    Iac = models.DecimalField(max_digits=20, decimal_places=4) # Current of Inverter
    Pac = models.DecimalField(max_digits=20, decimal_places=4) # Power generated by inverter
    Fac = models.DecimalField(max_digits=20, decimal_places=4) # Frequency of Inverter
    
    objects = DataFrameManager()
    def __str__(self):
        return str(self.Time)